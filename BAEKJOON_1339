import java.io.*;
import java.util.*;


public class Main {
    static int min =-1;
    static int[] alpha = new int[256];

    public static int calc(String[] a, Character[] letters, int[] d) {
        int m = letters.length;
        int sum =0;
        for(int i=0; i<m; i++){
            alpha[letters[i]]=d[i];
        }
        for (String s : a) {
            int now =0;
            for (char x : s.toCharArray()) {
                now = now * 10 + alpha[x];
            }
            sum +=now;
        }
        return sum;
    }


    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        min =0;
        int N = Integer.parseInt(br.readLine());

        String[] a= new String[N];
        HashSet<Character> s = new HashSet<>();

        for(int i=0; i<N; i++){
            a[i] = br.readLine();
            for (char x : a[i].toCharArray()) {
                s.add(x);
            }
        }

        Character[] letters = s.toArray(new Character[s.size()]);
        int m = letters.length;
        int[] d = new int[m];
        for(int i=0; i<m; i++){
            d[i] = 9-i;
        }

        Arrays.sort(d);
        int ans= 0;
        do {
            int now = calc(a,letters,d);
            if(min < now){
                min = now;
            }

        } while (next_permutation(d));

        bw.write(String.valueOf(min));
        bw.flush();
        bw.close();

    }

    private static boolean next_permutation(int[] d) {
        int i = d.length-1;
        while (i > 0 && d[i - 1] >= d[i]) {
            i-=1;
        }

        if (i <= 0) {
            return false;
        }

        int j = d.length-1;

        while (d[i - 1] >= d[j]) {
            j-=1;
        }

        int temp = d[i-1];
        d[i-1] =d[j];
        d[j]=temp;


        j = d.length-1;

        while (i < j) {
            temp = d[i];
            d[i] = d[j];
            d[j] =temp;
            i++;
            j--;
        }
        return true;
    }
}


