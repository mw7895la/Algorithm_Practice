

import java.io.*;
import java.sql.Array;
import java.util.*;

public class Main {
    static List<Tree>[] list;
    static int N;
    static StringBuilder sb = new StringBuilder();
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        N = Integer.parseInt(br.readLine());

        list = new ArrayList[N+1];

        for(int i=1; i<N+1; i++){
            list[i] = new ArrayList<>();
        }
        StringTokenizer st;
        for(int i=0; i<N; i++){
            st = new StringTokenizer(br.readLine());
            int root = st.nextToken().charAt(0) -'A' +1;
            int left = st.nextToken().charAt(0) -'A' +1;
            int right= st.nextToken().charAt(0) -'A' +1;
            list[root].add(new Tree(left, right));
        }

        preOrder(1);
        sb.append("\n");
        inOrder(1);
        sb.append("\n");
        postOrder(1);
        sb.append("\n");

        bw.write(sb.toString());
        bw.flush();
        bw.close();


    }

    public static void preOrder(int start){
        for(Tree tree : list[start]){
            int left = tree.left;
            int right = tree.right;

            sb.append((char)(start+'A'-1));
            if(left != -18)preOrder(left);
            if(right != -18)preOrder(right);
        }
    }
    public static void inOrder(int start){
        for (Tree tree : list[start]) {
            int left = tree.left;
            int right = tree.right;

            if(left != -18)inOrder(left);
            sb.append((char) (start + 'A' - 1));
            if(right != -18)inOrder(right);
        }
    }

    public static void postOrder(int start){
        for (Tree tree : list[start]) {
            int left = tree.left;
            int right = tree.right;

            if(left != -18)postOrder(left);
            if(right != -18)postOrder(right);
            sb.append((char) (start + 'A' - 1));
        }
    }
    static class Tree{
        int left;
        int right;

        public Tree(int left, int right) {
            this.left = left;
            this.right = right;
        }
    }

}
