import java.io.*;
import java.util.*;
public class Main{

    static int N;
    static int M;
    static int start_x;
    static int start_y;
    static char[][] cycle;
    static boolean[][] v;
    static int[] dx = new int[]{0, 1, 0, -1};
    static int[] dy = new int[]{1, 0, -1, 0};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        cycle = new char[N][M];

        for(int i=0; i<N; i++){
            StringBuilder sb = new StringBuilder(br.readLine());
            for(int j=0; j<M; j++){
                cycle[i][j] = sb.toString().charAt(j);
            }
        }
        boolean ok =false;
        for(int i=0; i<N; i++){
            for(int j=0; j<M; j++){
                v= new boolean[N][M];
                start_x = i;
                start_y = j;
                if(dfs(i,j,1)){
                    ok=true;

                }
            }
        }

        if(ok){
            bw.write("Yes");
        }else{
            bw.write("No");
        }
        bw.flush();
        bw.close();
    }

    public static boolean dfs(int x,int y,int count){
        v[x][y] = true;
        for (int i = 0; i < 4; i++) {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if (nx < N && nx >= 0 && ny < M && ny >= 0 && cycle[x][y] == cycle[nx][ny]) {
                if (!v[nx][ny]) {
                    if (dfs(nx, ny, count + 1))return true;
                } else {
                    if (count >= 4 && start_x==nx && start_y==ny)return true;
                }
            }
        }
        return false;
    }
}
