import java.io.*;
import java.util.*;


public class Main {

    public static List<Integer>[] list;
    public static Stack<Integer> s; 
    public static int start;
    public static boolean[] v;
    static BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
    static BufferedWriter bw= new BufferedWriter(new OutputStreamWriter(System.out));
    public static Queue<Integer> q = new LinkedList<>();
    public static void main(String[] args) throws IOException {


        StringTokenizer st =new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());       //정점 개수     4
        int E = Integer.parseInt(st.nextToken());       //간선의 수      5 
        start = Integer.parseInt(st.nextToken());       //시작 점

        list = new ArrayList[N+1];
        v =new boolean[N+1];
        Arrays.fill(v,false);
        for(int i=1; i<N+1; i++){
            list[i] = new ArrayList<>();
        }

        for(int i=0; i<E; i++){
            st = new StringTokenizer(br.readLine());
            int x = Integer.parseInt(st.nextToken());
            int y = Integer.parseInt(st.nextToken());
            list[x].add(y);
            list[y].add(x);
        }
        
        for(int i=1; i<N+1; i++){
            list[i].sort(Comparator.naturalOrder());
        }

        dfs(start);
        Arrays.fill(v,false);
        bw.newLine();
        bfs(start);
        bw.flush();
        bw.close();
    }

    public static void dfs(int start)throws IOException{
        if(v[start]==true){
            return;
        }

        v[start] = true;
        bw.write(String.valueOf(start)+" ");
        for(int i : list[start]){
            int next = i;
            if(v[next] == false){
                dfs(next);
            }
        }

    }

    public static void bfs(int start)throws IOException{

        v[start]=true;
        q.add(start);

        while(!q.isEmpty()){
            int x = q.poll();
            bw.write(String.valueOf(x)+" ");
            for(int i : list[x]){
                int next = i;
                if(v[next]==false){
                    v[next]=true;
                    q.add(next);
                }
            }
        }
    }
}
