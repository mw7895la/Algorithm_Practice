

import java.io.*;
import java.sql.Array;
import java.util.*;

public class Main {
    static Node[] a = new Node[10001];
    static int[] cnt = new int[10001];
    static int[] left = new int[10001];
    static int[] right = new int[10001];
    static int order=0;

    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int N = Integer.parseInt(br.readLine());
        StringTokenizer st;
        for(int i=0; i<N; i++){
            st =new StringTokenizer(br.readLine());
            int root = Integer.parseInt(st.nextToken());
            int x = Integer.parseInt(st.nextToken());
            int y = Integer.parseInt(st.nextToken());
            a[root] = new Node(x,y);
            if(x != -1 ) cnt[x]++;
            if(y != -1) cnt[y]++;
        }

        int root =0;
        for(int i=1; i<=N; i++){
            if(cnt[i]==0){
                root = i;
            }
        }

        inOrder(root,1);

        int maxDepth=0;

        for(int i=1; i<=N; i++){
            int depth = a[i].depth;
            int order = a[i].order;

            if(left[depth]==0){
                left[depth] = order;
            }else{
                left[depth] = Math.min(left[depth],order);
            }
            right[depth] = Math.max(right[depth],order);
            maxDepth = Math.max(maxDepth,depth);
        }

        int ans =0;
        int ans_level=0;

        for(int i=1; i<=maxDepth; i++){
            if(ans < right[i]-left[i]+1){
                ans = right[i] -left[i] +1;
                ans_level = i;
            }
        }

        bw.write(ans_level+" "+ans);
        bw.flush();
        bw.close();
    }

    public static void inOrder(int node,int depth){
        if(node == -1){
            return;
        }

        inOrder(a[node].left,depth+1);
        a[node].order = ++order;
        a[node].depth= depth;
        inOrder(a[node].right, depth+1);
    }

    static class Node{
        int left;
        int right;
        public int depth;
        public int order;

        public Node(int left, int right) {
            this.left = left;
            this.right = right;
        }
    }
}
