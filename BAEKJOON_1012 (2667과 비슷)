import java.io.*;
import java.util.*;
public class Main{
    int x;
    int y;

    public Main(int x, int y) {
        this.x = x;
        this.y = y;
    }

    static int[][] b;
    static int[][] group;
    static int[] dx = new int[]{0, 1, 0, -1};
    static int[] dy = new int[]{1, 0, -1, 0};
    static int count;
    static int N;
    static int M;
    static int built;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int test_case = Integer.parseInt(br.readLine());

        for(int t=1; t<=test_case; t++){
            count =0;
            StringTokenizer st = new StringTokenizer(br.readLine());
            N = Integer.parseInt(st.nextToken());           //가로
            M = Integer.parseInt(st.nextToken());           //세로
            built = Integer.parseInt(st.nextToken());       //배추 심은것 개수
            b=new int[M][N];
            group=new int[M][N];
            for(int i=0; i<M; i++){
                Arrays.fill(group[i],0);
            }

            for(int i=0; i<built; i++){
                st=new StringTokenizer(br.readLine());
                int x = Integer.parseInt(st.nextToken());
                int y = Integer.parseInt(st.nextToken());
                b[y][x] = 1;
            }

            for(int i=0; i<M; i++){
                for(int j=0; j<N; j++){
                    if(b[i][j]==1 && group[i][j]==0){
                        bfs(i,j,b,group,++count);
                    }
                }
            }

            bw.write(String.valueOf(count));
            bw.newLine();
            bw.flush();
        }//test_case
        bw.close();
    }
    public static void bfs(int x,int y,int[][] b,int[][] group, int count){
        Queue<Main> q = new LinkedList<>();
        q.add(new Main(x,y));
        group[x][y]=count;
        while(!q.isEmpty()){
            Main m = q.poll();
            x = m.x;
            y = m.y;
            for(int i=0; i<4; i++){
                int nx = x + dx[i];
                int ny = y + dy[i];
                if(nx<M && ny<N && nx>=0 && ny>=0){
                    if(b[nx][ny]==1 && group[nx][ny]==0){
                        q.add(new Main(nx,ny));
                        group[nx][ny]=count;
                    }
                }
            }
        }
    }


}
