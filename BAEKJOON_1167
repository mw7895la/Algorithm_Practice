import java.io.*;
import java.sql.Array;
import java.util.*;

public class Main {
    int edge;
    int cost;

    public Main(int edge, int cost) {
        this.edge = edge;
        this.cost = cost;
    }

    static int N;
    static ArrayList<Main>[] list;
    static boolean[] visit;
    static int max =0;
    static int node=0;
    static Stack<Main> s = new Stack<>();
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        N = Integer.parseInt(br.readLine());
        list = new ArrayList[N + 1];
        visit = new boolean[N + 1];


        for(int i=1; i<N+1; i++){
            list[i] = new ArrayList<>();
        }
        StringTokenizer st;
        for(int i=1; i<N+1; i++){
            st = new StringTokenizer(br.readLine());
            int x = Integer.parseInt(st.nextToken());
            while(true) {
                int y = Integer.parseInt(st.nextToken());
                if(y==-1){
                    break;
                }
                int weight = Integer.parseInt(st.nextToken());
                list[x].add(new Main(y,weight));
            }
        }

        DFS(1,0);
        Arrays.fill(visit,false);
        DFS(node,0);

        bw.write(String.valueOf(max));
        bw.flush();
        bw.close();

    }
    public static void DFS(int x, int len){
        if(len > max){
            max = len;
            node = x;
        }
        if(visit[x]){
            return;
        }
        visit[x]=true;

        for(Main m : list[x]){

            if(!visit[m.edge]){

                DFS(m.edge, m.cost + len);

            }
        }
    }
}
