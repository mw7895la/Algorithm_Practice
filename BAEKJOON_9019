import java.io.*;
import java.util.*;
public class Main {

    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int test_case = Integer.parseInt(br.readLine());
        int[] dist;
        int[] from;
        boolean[] check;
        char[] how;
        Queue<Integer> q;

        while(test_case-- >0){
            StringTokenizer st = new StringTokenizer(br.readLine());
            int n = Integer.parseInt(st.nextToken());
            int m = Integer.parseInt(st.nextToken());
            //n이 시작 수 m이 도착 수
            // ex) 1234 -> 3124
            dist = new int[10001];
            from = new int[10001];
            check = new boolean[10001];
            how = new char[10001];
            q = new LinkedList<>();

            dist[n] = 0; from[n]=-1;
            check[n] =true; how[n]=' ';
            q.add(n);


            while (!q.isEmpty()) {
                int now = q.poll();

                int next = (now*2)%10000;
                if (!check[next]) {
                    check[next]=true;
                    q.add(next);
                    dist[next]=dist[now]+1;
                    from[next]=now;
                    how[next]='D';
                }

                next = now-1;
                if(next==-1)next=9999;
                if (!check[next]) {
                    check[next]=true;
                    q.add(next);
                    dist[next]=dist[now]+1;
                    from[next]=now;
                    how[next]='S';
                }

                next = (now%1000)*10 + now/1000;
                if (!check[next]) {
                    check[next]=true;
                    q.add(next);
                    dist[next]=dist[now]+1;
                    from[next] = now;
                    how[next]='L';
                }

                next = (now%10)*1000 + now/10;
                if (!check[next]) {
                    check[next]=true;
                    q.add(next);
                    dist[next]=dist[now]+1;
                    from[next]=now;
                    how[next]='R';
                }
            }
            StringBuilder sb= new StringBuilder();
            while(m!=n){
                if(m==n)return;
                sb.append(how[m]);
                m = from[m];
            }
            bw.write(sb.reverse().toString());
            bw.newLine();
            bw.flush();
        }

        bw.close();
    }

}
