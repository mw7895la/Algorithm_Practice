import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.StringTokenizer;

public class test {
    // 배열의 크기가 더 긴쪽 을 기준으로
    //

    // 1  5  3              // 3 30 -21  = 12               //인덱스 0
    // 3  6  -7  5  4

    //    1  5  3           // 6 -35 15  = -14              // 인덱스 1
    // 3  6  -7  5  4

    //        1  5  3       // -7 25 12  = 30               //인덱스 2일 때   인덱스2+ 배열의 크기  =5  == 배열 B의 크기
    // 3  6  -7  5  4
    public static void main(String[] args) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        StringTokenizer st = new StringTokenizer(br.readLine());

        int test_case = Integer.parseInt(st.nextToken());        // test case 10개

        for(int test=0; test<test_case; test++) {
            st = new StringTokenizer(br.readLine());

            int N = Integer.parseInt(st.nextToken());           // 총 배열의 크기 N X N

            int M = Integer.parseInt(st.nextToken());           // 파리채의 크기  2 이상

            // 0.0  0.1  1.0  1.1      //    2.2  2.3  3.2  3.3

            int[][] area = new int[N][N];

            for (int i = 0; i < N; i++) {
                st = new StringTokenizer(br.readLine().trim());
                for (int j = 0; j < N; j++) {

                    area[i][j] = Integer.parseInt(st.nextToken());
                    //System.out.print(area[i][j]+" ");
                }

            }
            //1 3 3 6 7
            //8 13 9 12 8
            //4 16 11 12 6
            //2 4 1 23 2
            //9 13 4 7 3

            // 5X5 에서 M=2 이면

            int max = 0;
            for (int j = 0; j <= N - M; j++) {

                for (int k = 0; k <= N - M; k++) {
                    int sum = 0;

                    for (int i = 0; i < M; i++) {
                        for (int p = 0; p < M; p++) {
                            sum = sum + area[j + i][k + p];
                        }

                    }
                    max = Math.max(max, sum);

                }

            }
            System.out.println("#"+(test+1)+" "+max);
        }




    }


}
