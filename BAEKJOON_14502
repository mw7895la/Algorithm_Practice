import java.io.*;
import java.sql.Array;
import java.util.*;
public class Main {

    static int[][] origin;
    static int N;
    static int M;
    static int[] dx = new int[]{0, 1, 0, -1};
    static int[] dy = new int[]{1, 0, -1, 0};
    static int max = Integer.MIN_VALUE;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        origin = new int[N][M];

        for(int i=0; i<N; i++){
            st= new StringTokenizer(br.readLine());
            for(int j=0; j<M; j++){
                origin[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        //가벽 3개 세우는 것은 DFS
        DFS(0);

        bw.write(String.valueOf(max));
        bw.flush();
        bw.close();

    }

    public static void DFS(int wall){
        if(wall==3){
            BFS();
            return;
        }
        for(int i=0; i<N; i++){
            for(int j=0; j<M; j++){
                if(origin[i][j] ==0){
                    origin[i][j]=1;
                    DFS(wall+1);
                    origin[i][j]=0;
                }
            }
        }
    }

    public static void BFS() {
        Queue<Parasite>q =new LinkedList<>();

        for(int i=0; i<N; i++){
            for(int j=0; j<M; j++){
                if(origin[i][j]==2){
                    q.add(new Parasite(i, j));
                }
            }
        }

        int[][] copy = new int[N][M];
        for(int i=0; i<N; i++){
            copy[i] = origin[i].clone();
        }

        while(!q.isEmpty()){
            Parasite p =q.poll();
            int x = p.x;
            int y = p.y;
            for(int i=0; i<4; i++){
                int nx = x+dx[i];
                int ny = y+dy[i];
                if(nx<N && ny<M && nx>=0 && ny>=0 && copy[nx][ny]==0){
                    copy[nx][ny]=2;
                    q.add(new Parasite(nx, ny));
                }
            }
        }

        check_count(copy);

    }
    public static void check_count(int[][] copy){
        int cnt =0;
        for(int i=0; i<N; i++){
            for(int j=0; j<M; j++){
                if(copy[i][j]==0){
                    cnt++;
                }
            }
        }
        if(max < cnt){
            max = cnt;
        }

    }

    static class Parasite{
        int x;
        int y;

        public Parasite(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
}
