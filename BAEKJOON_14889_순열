import java.io.*;
import java.util.*;
public class Main {

    static int[] a;
    static int N;
    static int[][] startLink;
    static int min=Integer.MAX_VALUE;
    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        N = Integer.parseInt(br.readLine());
        startLink = new int[N][N];
        a = new int[N];
        for(int i=0; i<N/2; i++){
            a[i] = 1;
        }
        Arrays.sort(a);
        StringTokenizer st;
        for(int i=0; i<N; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0 ;j<N; j++){
                startLink[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        do {
            ArrayList<Integer> first = new ArrayList<>();
            ArrayList<Integer> second = new ArrayList<>();
            for(int i=0; i<N; i++){
                if(a[i]==0){
                    first.add(i);
                }else{
                    second.add(i);
                }
            }
            int teamA=0;
            int teamB=0;
            for(int i=0; i<N/2; i++){
                for(int j=0; j<N/2; j++){
                    if(i==j)continue;
                    teamA = teamA + startLink[first.get(i)][first.get(j)];
                    teamB = teamB + startLink[second.get(i)][second.get(j)];
                }
            }

            int now = Math.abs(teamA - teamB);

            if (min > now) {
                min = now;
            }

        } while (next_permutation(a));

        bw.write(String.valueOf(min));
        bw.flush();
        bw.close();

    }


    public static boolean next_permutation(int[] a) {
        int i = a.length-1;

        while (i > 0 && a[i - 1] >= a[i]) {
            i-=1;
        }

        if (i <= 0) {
            return false;
        }

        int j = a.length-1;
        while (a[i - 1] >= a[j]) {
            j-=1;
        }

        int temp = a[i-1];
        a[i-1] = a[j];
        a[j] = temp;

        j = a.length-1;

        while (i < j) {
            temp = a[i];
            a[i] = a[j];
            a[j] =temp;
            i++;
            j--;
        }
        return true;
    }
}


