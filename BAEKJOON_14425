import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());


        String[] S = new String[N];
        String[] isEqual = new String[M];

        for(int i=0; i<S.length; i++){
            S[i] = br.readLine();
        }

        for(int i=0; i<isEqual.length; i++){
            isEqual[i] = br.readLine();
        }

        int count=0;

        for(int i=0; i<S.length; i++){
            for(int j=0; j<isEqual.length; j++){
                if(S[i].equals(isEqual[j])){
                    count++;
                    break;
                }
            }
        }

        System.out.println(count);



    }
}
////////////////////////////////////////////////////위처럼 하지 말고  HashMap을 이용

import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.StringTokenizer;

public class Main {

    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());

        HashMap<String,Integer> map = new HashMap<>();

        int count=0;
        for(int i=0; i<N; i++){
            map.put(br.readLine(),1);
        }

        for(int i=0; i<M; i++){
            String str = br.readLine();
            if(map.get(str) != null){
                count++;
            }
        }

        bw.write(count+"\n");

        br.close();
        bw.flush();
        bw.close();


    }
}

