import java.io.*;
import java.sql.Array;
import java.util.*;
public class Main {
    static int N;
    static int[][] area;
    static boolean[][] v;
    static int[] height;
    static int cnt=0;
    static int[] dx = new int[]{0, 1, 0, -1};
    static int[] dy = new int[]{1, 0, -1, 0};
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        N = Integer.parseInt(br.readLine());
        StringTokenizer st;
        area = new int[N][N];
        v=new boolean[N][N];
        height=new int[101];

        List<Integer> list = new ArrayList<>();
        for(int i=0; i<N; i++){
            st=new StringTokenizer(br.readLine());
            for(int j=0; j<N; j++){
                area[i][j] = Integer.parseInt(st.nextToken());
                height[area[i][j]]++;
            }
        }
        list.add(0);
        for(int i=0; i<101; i++){
            if(height[i]!=0){
                list.add(i);
            }
        }
        list.sort(Comparator.naturalOrder());


        int max=0;
        for(int depth : list) {
            cnt =0;
            for (int i = 0; i < N; i++) {
                for (int j = 0; j < N; j++) {
                    if(area[i][j] > depth && !v[i][j]) {
                        cnt++;
                        dfs(i, j, depth);
                    }
                }
            }
            max = Math.max(cnt, max);
            restore();
        }
        bw.write(String.valueOf(max));
        bw.flush();
        bw.close();
    }

    public static void dfs(int x,int y,int depth){
        if(v[x][y]){
            return;
        }
        v[x][y] =true;
        for(int i=0; i<4; i++){
            int nx = x+dx[i];
            int ny = y+dy[i];
            if (nx < N && ny < N && nx >= 0 && ny >= 0 && area[nx][ny]>depth && v[nx][ny]==false) {

                dfs(nx,ny,depth);
            }
        }
    }


    public static void restore(){
        for(int i=0; i<N; i++){
            Arrays.fill(v[i], false);
        }
    }

}
