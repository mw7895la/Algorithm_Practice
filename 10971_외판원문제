import java.io.*;
import java.util.*;

public class Main {
    public static boolean next_permutation(int[] d){
        int i =d.length-1;
        while(i>0 && d[i-1] >= d[i]){
            i-=1;
        }
        if(i<=0){
            return false;
        }
        int j= d.length-1;
        while(d[j] <=d[i-1]){
            j-=1;
        }

        int temp = d[i-1];
        d[i-1]=d[j];
        d[j] = temp;

        j = d.length-1;
        while(i<j){
            temp = d[i];
            d[i] = d[j];
            d[j] = temp;
            i+=1;
            j-=1;
        }
        return true;
    }
    public static void main(String[] args) throws IOException {
        BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));

        int N = Integer.parseInt(br.readLine());
        int[][] w =new int[N][N];
        int[] d = new int[N];
        boolean ok;
        for(int i=0; i<N; i++) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            for(int j=0; j<N; j++){
                w[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        for(int i=0; i<N; i++){
            d[i]=i;
        }
        int min = Integer.MAX_VALUE;
        do{
            ok = true;
            int sum=0;
            for(int i=0; i<N-1; i++){
                if(w[d[i]][d[i+1]]==0){
                    ok=false;
                }else{
                    sum +=(w[d[i]][d[i+1]]);
                }

            }
            if(ok && w[d[N-1]][d[0]]!=0){
                sum = sum+w[d[N-1]][d[0]];
                if(min >sum){
                    min =sum;
                }
            }

        }while(next_permutation(d));

        bw.write(String.valueOf(min));
        bw.flush();
        bw.close();

    }
}
