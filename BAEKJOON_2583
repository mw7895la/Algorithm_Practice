import java.io.*;
import java.sql.Array;
import java.util.*;

public class Main {
    static int cnt =0;
    static int count=0;
    static int M;
    static int N;
    static int K;
    static int[][] paper;
    static boolean[][] visit;
    static int[] dx = new int[]{0, 1, 0, -1};
    static int[] dy = new int[]{1, 0, -1, 0};
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        // M , N , K
        StringTokenizer st = new StringTokenizer(br.readLine());
        M = Integer.parseInt(st.nextToken());
        N = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());

        paper=new int[N][M];
        for(int i=0; i<N; i++){
            Arrays.fill(paper[i], -1);
        }

        visit=new boolean[N][M];

        for(int i=0; i<K; i++){
            st =new StringTokenizer(br.readLine());
            int x1 = Integer.parseInt(st.nextToken());
            int y1 = Integer.parseInt(st.nextToken());
            int x2 = Integer.parseInt(st.nextToken());
            int y2 = Integer.parseInt(st.nextToken());
            for(int j=x1; j<=x2-1; j++){
                for(int k=y1; k<=y2-1; k++){
                    visit[j][k]=true;
                }
            }
        }

        for(int i=0; i<N; i++){
            for(int j=0; j<M; j++){
                if(visit[i][j]==false){
                    cnt++;
                    paper[i][j]=count;
                    DFS(i,j,count);
                    count++;
                }
            }
        }

        int[] result = new int[cnt];
        for(int i=0; i<N; i++){
            for(int j=0; j<M; j++){
                if(paper[i][j]!=-1){
                    result[paper[i][j]]++;
                }
            }
        }

        bw.write(String.valueOf(cnt));
        bw.newLine();
        Arrays.sort(result);
        for (int i : result) {
            bw.write(i + " ");
        }
        bw.flush();
        bw.close();
    }

    public static void DFS(int x, int y,int count){
        if(visit[x][y]){
            return;
        }
        visit[x][y]=true;

        for(int i=0; i<4; i++){
            int nx = x +dx[i];
            int ny = y +dy[i];
            if (ny < M && nx < N && ny >= 0 && nx >= 0 && visit[nx][ny] == false) {
                paper[nx][ny]=count;
                DFS(nx, ny,count);
            }
        }

    }
}
