import java.io.*;
import java.math.BigInteger;
import java.util.*;




public class Main {
    static class Pair{
        int x;
        int y;

        public Pair(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
    static int[][] a;
    static int[][] group;
    static int cnt=0;
    static int[] dx = new int[]{0, 1, 0, -1};
    static int[] dy = new int[]{1, 0, -1, 0};

    public static void main(String[] args) throws IOException {
        BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int N = Integer.parseInt(br.readLine());

        a= new int[N][N];
        group=new int[N][N];
        StringBuilder sb;
        for(int i=0; i<N; i++){
            sb=new StringBuilder(br.readLine());
            for(int j=0; j<N; j++){
                a[i][j] = sb.charAt(j)-48;
            }
        }//data input

        for(int i=0; i<N; i++){
            for(int j=0; j<N; j++){
                if(a[i][j]==1 && group[i][j]==0){
                    bfs(a,group,i,j,++cnt,N);
                }
            }
        }
        int[] ans = new int[cnt];

        for(int i=0; i<N; i++){
            for(int j=0; j<N; j++){
                if(group[i][j]!=0){
                    ans[group[i][j]-1]+=1;
                }
            }
        }

        Arrays.sort(ans);
        bw.write(String.valueOf(cnt));
        bw.newLine();
        for(int num : ans){
            bw.write(String.valueOf(num));
            bw.newLine();
        }
        bw.flush();
        bw.close();
    }

    public static void bfs(int[][] a,int[][] group,int x, int y,int cnt,int N){
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(x,y));
        group[x][y]=cnt;

        while(!q.isEmpty()){
            Pair p = q.poll();
            x= p.x;
            y=p.y;

            for(int i=0; i<4; i++){
                int nx = x+dx[i];
                int ny = y+dy[i];

                if(nx>=0 && nx<N && ny>=0 && ny<N){
                    if (a[nx][ny] == 1 && group[nx][ny] == 0) {
                        q.add(new Pair(nx,ny));
                        group[nx][ny]=cnt;

                    }
                }
            }

        }

    }

}
