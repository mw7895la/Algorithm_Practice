import java.io.*;
import java.util.*;


public class Main {
    int x;
    int y;

    public Main(int x, int y) {
        this.x = x;
        this.y = y;
    }

    static int[] dx = new int[]{0, 1, 0, -1};
    static int[] dy = new int[]{1, 0, -1, 0};
    static int N;
    static int M; 
    static int[][] miro;
    static int[][] visit;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        miro = new int[N][M];
        visit = new int[N][M];
        for(int i=0; i<N; i++){
            StringBuilder sb =new StringBuilder(br.readLine());
            for(int j=0; j<M; j++){
                miro[i][j] = sb.charAt(j)-48;
            }
        }
        visit[0][0]=1;
        bfs(0,0);
        bw.write(String.valueOf(miro[N - 1][M - 1]));
        bw.flush();
        bw.close();

    }

    public static void bfs(int x,int y){
        Queue<Main> q = new LinkedList<>();
        q.add(new Main(x,y));

        while(!q.isEmpty()) {

            Main m = q.poll();

            x = m.x;
            y = m.y;

            for (int i = 0; i < 4; i++) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                if (ny < M && nx < N && nx >= 0 && ny >= 0) {
                    if (miro[nx][ny] == 1 && visit[nx][ny] == 0) {
                        miro[nx][ny] = miro[x][y] + 1;
                        visit[nx][ny] = 1;
                        q.add(new Main(nx, ny));


                    }
                }
            }
        }
    }
}
