import java.io.*;
import java.util.*;
public class Main {
    int x;
    int y;

    public Main(int x, int y) {
        this.x = x;
        this.y = y;
    }
    static class Wall{
        int x;
        int y;

        public Wall(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
    static int check=0;

    static char[][] chess = new char[8][8];
    static int[] dx = new int[]{0, 1, 0, -1, -1, -1, 1, 1,0};
    static int[] dy = new int[]{1, 0, -1, 0, -1, 1, 1, -1,0};

    static boolean[][] visit = new boolean[8][8];

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringBuilder sb;
        Queue<Wall> wall = new LinkedList<>();
        for(int i=0; i<8; i++){
            sb = new StringBuilder(br.readLine());
            for(int j=0; j<8; j++){
                if (sb.charAt(j) == '#') {
                    wall.add(new Wall(i, j));
                }
                chess[i][j]= sb.charAt(j);
            }
        }
        
        BFS(7,0,wall);

        bw.write(String.valueOf(check));
        bw.flush();
        bw.close();
    }
    public static void BFS(int xpos,int ypos,Queue<Wall> wall){
        Queue<Main> q = new LinkedList<>();
        q.add(new Main(xpos, ypos));
        visit[xpos][ypos]=true;

        while (!q.isEmpty()) {
            //욱제의 위치
            int size = q.size();

            for(int k=0; k<size; k++) {
                Main m = q.poll();
                int x = m.x;
                int y = m.y;
                //욱제가 먼저 이동.
                if(chess[x][y]=='#')continue;
                for (int i = 0; i < 9; i++) {

                    int nx = x + dx[i];
                    int ny = y + dy[i];
                    if (nx < 8 && ny < 8 && nx >= 0 && ny >= 0  && chess[nx][ny] != '#') {
                        if (nx == 0 && ny == 7) {
                            check = 1;
                            return;
                        }
                        q.add(new Main(nx, ny));
                    }
                }
            }
            wall_check();
        }
    }

    private static void wall_check() {
        for (int i = 7; i >= 0; i--) {
            for(int j=0; j<8; j++){
                if (chess[i][j] == '#') {
                    chess[i][j]='.';
                    if(i!=7){
                        chess[i+1][j] ='#';
                    }
                }
            }
        }
    }
}
