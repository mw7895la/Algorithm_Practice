import java.io.*;
import java.math.BigInteger;
import java.sql.Array;
import java.util.*;

public class Main {
    static int N;
    static int M;
    static int K;
    static int[][] passage;
    static boolean[][] visit;
    static int[] dx = new int[]{0, 1, 0, -1};
    static int[] dy = new int[]{1, 0, -1, 0};
    static int max=1;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());

        passage= new int[N][M];
        visit = new boolean[N][M];

        for(int i=0; i<K; i++){
            st = new StringTokenizer(br.readLine());
            int x = Integer.parseInt(st.nextToken());
            int y = Integer.parseInt(st.nextToken());
            passage[x-1][y-1]=1;
        }
        int result=0;
        for(int i=0; i<N; i++){
            for(int j=0; j<M; j++){
                if (!visit[i][j] && passage[i][j] == 1) {
                    max =1;
                    DFS(i, j);
                    if(result < max ){
                        result = max;
                    }
                }
            }
        }

        bw.write(String.valueOf(result));
        bw.flush();
        bw.close();
    }

    public static void DFS(int x,int y) {
        if (visit[x][y]) {
            return;
        }

        visit[x][y]=true;

        for(int i=0; i<4; i++){
            int nx = x + dx[i];
            int ny = y + dy[i];
            if (nx < N && ny < M && nx >= 0 && ny >= 0 && passage[nx][ny]==1) {
                if (!visit[nx][ny]) {
                    max+=passage[nx][ny];
                    DFS(nx, ny );
                }
            }
        }


    }

}

