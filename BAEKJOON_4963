import java.io.*;
import java.math.BigInteger;
import java.util.*;

class Pair{
    int x;
    int y;

    public Pair(int x, int y) {
        this.x = x;
        this.y = y;
    }
}


public class Main {
    static int[][] land;
    static int[][] visit;
    static int cnt;
    static int[] dx = new int[]{0,1,0,-1,-1,-1,1,1};
    static int[] dy = new int[]{1,0,-1,0,-1,1,-1,1};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        while(true) {

            StringTokenizer st = new StringTokenizer(br.readLine());
            int w = Integer.parseInt(st.nextToken());
            int h = Integer.parseInt(st.nextToken());
            if(w==0 && h==0){
                break;
            }
            land = new int[h][w];
            visit = new int[h][w];
            for (int i = 0; i < h; i++) {
                st = new StringTokenizer(br.readLine());
                for (int j = 0; j < w; j++) {
                    land[i][j] = Integer.parseInt(st.nextToken());
                }
            }
            cnt = 0;
            for (int i = 0; i < h; i++) {
                for (int j = 0; j < w; j++) {
                    if (land[i][j] != 0 && visit[i][j] == 0) {
                        bfs(land, visit, i, j, ++cnt, h, w);
                    }
                }
            }



            bw.write(String.valueOf(cnt));
            bw.newLine();
            bw.flush();
        }

        bw.close();


    }
    public static void bfs(int[][] land, int[][]visit, int x, int y, int cnt, int h, int w){
        Queue<Pair> q =new LinkedList<>();
        q.add(new Pair(x,y));
        visit[x][y]=cnt;

        while(!q.isEmpty()){
            Pair p = q.poll();
            x= p.x;
            y=p.y;
            for(int i=0; i<8; i++){
                int nx = x+dx[i];
                int ny = y+dy[i];
                if(nx>=0 && ny>=0 && ny<w && nx<h){
                    if(visit[nx][ny]==0 && land[nx][ny]!=0){
                        visit[nx][ny]=cnt;
                        q.add(new Pair(nx,ny));
                    }
                }
            }
        }
    }



}
