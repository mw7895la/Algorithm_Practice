import java.io.*;
import java.util.*;
public class Main {
    int x;
    int y;
    int dist;

    public Main(int x, int y, int dist) {
        this.x = x;
        this.y = y;
        this.dist = dist;
    }

    static int[][] board;
    static int r1,c1,r2,c2,N;
    static int[] dx = new int[]{-2, -2, 0, 0, 2, 2};
    static int[] dy = new int[]{-1, 1, -2, 2, -1, 1};
    static int min = Integer.MAX_VALUE;
    static boolean[][] visit;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        N = Integer.parseInt(br.readLine());
        board = new int[N][N];
        visit= new boolean[N][N];

        StringTokenizer st = new StringTokenizer(br.readLine());
        r1 = Integer.parseInt(st.nextToken());
        c1 = Integer.parseInt(st.nextToken());
        r2 = Integer.parseInt(st.nextToken());
        c2 = Integer.parseInt(st.nextToken());


        BFS(r1, c1);
        if (min == Integer.MAX_VALUE) {
            bw.write("-1");
        }else {
            bw.write(String.valueOf(min));
        }
        bw.flush();
        bw.close();
    }

    public static void BFS(int start, int end) {
        Queue<Main> q = new LinkedList<>();

        q.add(new Main(start, end, 0));

        while (!q.isEmpty()) {
            Main m = q.poll();
            int x = m.x;
            int y = m.y;
            int dist = m.dist;
            if (x == r2 && y == c2) {
                if(min > dist){
                    min = dist;
                }
                return;
            }

            for(int i=0; i<6; i++){
                int nx = x + dx[i];
                int ny = y + dy[i];
                if (nx >= 0 && ny >= 0 && nx < N && ny < N) {
                    if (!visit[nx][ny]) {
                        visit[nx][ny]=true;
                        q.add(new Main(nx, ny, dist + 1));
                    }
                }
            }
        }
    }
}
