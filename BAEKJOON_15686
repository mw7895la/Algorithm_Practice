import java.io.*;
import java.util.*;
public class Main{
    int x;
    int y;

    public Main(int x, int y) {
        this.x = x;
        this.y = y;
    }
    static int N;
    static int M;
    public static List<Main> house;
    public static List<Main> chicken;
    static int min=Integer.MAX_VALUE;
    public static boolean[] v;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        int[][] arr = new int[N][N];
        house = new ArrayList<>();
        chicken = new ArrayList<>();
        for(int i=0; i<N; i++){
            st= new StringTokenizer(br.readLine());
            for(int j=0; j<N; j++){
                int number = Integer.parseInt(st.nextToken());
                arr[i][j] = number;
                if(number==1){
                    house.add(new Main(i,j));
                }
                if(number==2){
                    chicken.add(new Main(i,j));
                }
            }
        }

        v = new boolean[chicken.size()];
        backtracking(0,0);
        bw.write(String.valueOf(min));
        bw.flush();
        bw.close();

    }

    public static void backtracking(int count, int index){
        if(count==M){
            int total=0;
            for(int i=0; i<house.size(); i++){
                int sum =Integer.MAX_VALUE;
                for(int j=0; j<chicken.size(); j++){
                    if(v[j]==true){
                        int distance = Math.abs(house.get(i).x - chicken.get(j).x) + Math.abs(house.get(i).y-chicken.get(j).y);
                        sum = Math.min(distance,sum);
                    }
                }
                total = total+sum;
            }
            min = Math.min(total, min);
            return;
        }

        for(int i=index; i<v.length; i++){
            if(v[i]==false){
                v[i]=true;
                backtracking(count+1, i+1);
                v[i]=false;
            }
        }
    }
}
