import org.w3c.dom.Node;

import java.io.*;
import java.math.BigInteger;
import java.sql.Array;
import java.util.*;

public class Main {
    int num;
    int value;

    public Main(int num, int value) {
        this.num = num;
        this.value = value;
    }

    static int N;
    static int M;
    static int[][] board;
    static boolean[] visit;
    static int max = Integer.MAX_VALUE;
    static int result=0;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        board = new int[N+1][N+1];


        for(int i=0; i<M; i++){
            st = new StringTokenizer(br.readLine());
            int x = Integer.parseInt(st.nextToken());
            int y = Integer.parseInt(st.nextToken());
            board[x][y] = board[y][x]=1;
        }

        for(int i=1; i<=N; i++){
            visit = new boolean[N + 1];
            BFS(i);
        }


        bw.write(Integer.toString(result));
        bw.flush();
        bw.close();

    }

    public static void BFS(int start){
        Queue<Main> q = new LinkedList<>();

        q.add(new Main(start, 0));
        visit[start]=true;
        int count =0;
        while (!q.isEmpty()) {
            Main m =q.poll();
            count = count + m.value;
            for(int i=1; i<=N; i++){
                int num  =board[m.num][i];

                if (num == 1 && !visit[i]) {
                    visit[i]=true;
                    q.add(new Main(i, m.value + 1));
                }
            }


        }
        if(max > count){
            max = count;
            result = start;
        }

    }
}

