import java.io.*;
import java.math.BigInteger;
import java.sql.Array;
import java.util.*;

public class Main {
    int x;
    int y;
    int dist;
    public Main(int x, int y, int dist) {
        this.x = x;
        this.y = y;
        this.dist = dist;
    }
    static int N;
    static int[][] shark;

    static int[] dx = new int[]{0, 1, 0, -1};
    static int[] dy = new int[]{1, 0, -1, 0};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        N = Integer.parseInt(br.readLine());
        shark = new int[N][N];

        Queue<Main> q= new LinkedList<>();
        StringTokenizer st;
        for(int i=0; i<N; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<N; j++){
                shark[i][j] = Integer.parseInt(st.nextToken());
                if (shark[i][j] == 9) {
                    q.add(new Main(i, j, 0));
                    shark[i][j]=0;
                }
            }
        }

        int size=2;
        int ans=0;
        int eat =0;

        while (true) {
            ArrayList<Main> eatFish = new ArrayList<>();
            int[][] dist = new int[N][N];

            while (!q.isEmpty()) {
                Main m = q.poll();
                int x = m.x;
                int y = m.y;
                for(int i=0; i<4; i++){
                    int nx = x +dx[i];
                    int ny = y+ dy[i];
                    if(nx<N && ny<N && nx>=0 && ny>=0){
                        if (dist[nx][ny] == 0 && shark[nx][ny] <= size) {
                            dist[nx][ny]=dist[x][y]+1;
                            q.add(new Main(nx, ny, dist[nx][ny]));
                            if (1 <= shark[nx][ny] && shark[nx][ny] <= 6 && shark[nx][ny] < size) {
                                eatFish.add(new Main(nx, ny, dist[nx][ny]));
                            }
                        }
                    }
                }
            }

            if(eatFish.size()==0){
                bw.write(String.valueOf(ans));
                bw.flush();
                break;
            }

            Main nowFish = eatFish.get(0);
            for(int i=1; i<eatFish.size(); i++){
                if (nowFish.dist > eatFish.get(i).dist) {
                    nowFish = eatFish.get(i);
                }else if(nowFish.dist == eatFish.get(i).dist) {
                    if (nowFish.x > eatFish.get(i).x) {
                        nowFish = eatFish.get(i);
                    } else if (nowFish.x == eatFish.get(i).x) {
                        if (nowFish.y > eatFish.get(i).y) {
                            nowFish=eatFish.get(i);
                        }
                    }
                }
            }
            shark[nowFish.x][nowFish.y]=0;
            ans +=nowFish.dist;
            eat++;
            if(size==eat){
                size++;
                eat=0;
            }
            q.add(nowFish);

        }
        bw.close();
    }
}

