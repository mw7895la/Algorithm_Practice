import java.io.*;
import java.util.*;

/** 같은 방법을 2번 사용하면 원래 상태로 돌아가기 때문에 같은 방법 2번이상 쓰지말자.
 *  3*3 교체 연산을 1번 사용하거나 사용하지 않는 경우로 생각하자.
 *
 *
 * */

public class Main {
    static int N;
    static int M;

    static int[][] A;
    static int[][] B;
    static boolean[][] visit;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        A = new int[N][M];
        B = new int[N][M];
        StringBuilder sb;
        for(int i=0; i<N; i++){
            sb = new StringBuilder(br.readLine());
            for(int j=0; j<M; j++){
                A[i][j] = sb.charAt(j)-48;
            }
        }
        for(int i=0; i<N; i++){
            sb = new StringBuilder(br.readLine());
            for(int j=0; j<M; j++){
                B[i][j] = sb.charAt(j)-48;
            }
        }
        int count =0;
        for(int i=0; i<N-2; i++){
            for(int j=0; j<M-2; j++){
                if(A[i][j] != B[i][j]){
                    count++;
                    flip(A,i+1,j+1);
                }
            }
        }

        for(int i=0; i<N; i++){
            for(int j=0; j<M; j++){
                if(A[i][j] != B[i][j]){
                    bw.write("-1");
                    bw.flush();
                    bw.close();
                    System.exit(0);
                }
            }
        }

        bw.write(String.valueOf(count));
        bw.flush();
        bw.close();


    }

    private static void flip(int[][] A, int x, int y) {
        for(int i=x-1; i<=x+1; i++){
            for(int j=y-1; j<=y+1; j++){
                if(A[i][j]==0){
                    A[i][j]=1;
                }else{
                    A[i][j]=0;
                }
            }
        }
    }
}

