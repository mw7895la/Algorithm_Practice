import java.io.*;
import java.util.*;
public class Main {
    int x;
    int y;
    int dist;
    int wall;
    boolean weather;

    public Main(int x, int y, int dist, int wall, boolean weather) {
        this.x = x;
        this.y = y;
        this.dist = dist;
        this.wall = wall;
        this.weather = weather;
    }

    static int min = Integer.MAX_VALUE;

    static int[] dx = new int[]{0, 1, 0, -1};
    static int[] dy = new int[]{1, 0, -1, 0};
    static int N;
    static int M;
    static int K;
    static int[][] board;
    static boolean[][][] visit;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());
        board = new int[N][M];
        visit =new boolean[N][M][K+1];
        StringBuilder sb;
        for(int i=0; i<N; i++){
            sb = new StringBuilder(br.readLine());
            for(int j=0; j<M; j++){
                board[i][j] = sb.charAt(j)-'0';
            }
        }

        BFS(0,0);

        if (min == Integer.MAX_VALUE) {
            bw.write("-1");
        }else{
            bw.write(String.valueOf(min));
        }

        bw.flush();
        bw.close();
    }

    public static void BFS(int xpos,int ypos) {
        Queue<Main> q = new LinkedList<>();

        q.add(new Main(xpos, ypos, 1, 0,true));
        //true면 낮
        visit[xpos][ypos][0]=true;
        while (!q.isEmpty()) {
            Main m = q.poll();
            int x = m.x;
            int y = m.y;
            int dist = m.dist;
            if(x ==N-1 && y ==M-1){
                if(min> dist){
                    min =dist;
                }
                return;
            }

            for(int i=0; i<4; i++){
                int nx=  x + dx[i];
                int ny = y + dy[i];
                if (nx < N && ny < M && nx >= 0 && ny >= 0) {
                    //벽이 없는 경우
                    if (board[nx][ny] == 0 && !visit[nx][ny][m.wall]) {
                        visit[nx][ny][m.wall]=true;
                        if(m.weather){
                            q.add(new Main(nx, ny, dist + 1, m.wall,false));
                        }else{
                            q.add(new Main(nx, ny, dist + 1, m.wall,true));
                        }

                    }else{
                        //벽이 있는 경우
                        if (board[nx][ny] == 1 && m.wall < K && !visit[nx][ny][m.wall + 1]) {
                            if(m.weather){
                                visit[nx][ny][m.wall+1]=true;
                                q.add(new Main(nx, ny, dist + 1, m.wall + 1, false));
                            }else{
                                q.add(new Main(x, y, dist + 1, m.wall, true));
                            }
                        }
                    }
                }
            }
        }

    }
}



















